{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Home\\\\Documents\\\\Anthony\\\\Lambda\\\\week12-Rd.2.React\\\\dark-mode\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState } from 'react';\nexport var useLocalStorage = function useLocalStorage(key, initialValue) {\n  var _useState = useState(function () {\n    //getItem by passing in key you want retrieved\n    var item = window.localStorage.getItem(key); //JSON.parse converts string back to an object\n\n    return item ? JSON.parse(item) : initialValue;\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      storedValue = _useState2[0],\n      setStoredValue = _useState2[1];\n\n  var setValue = function setValue(value) {\n    setStoredValue(value); //setItem takes 1) string of key 2) string you want to save\n    //localStorage only saves strings - must stringify vaue\n\n    window.localStorage.setItem(key, JSON.stringify(value));\n  };\n\n  return [storedValue, setValue];\n}; //Local storage is ability to store strings that persist across user sessions\n//object stored in browser when you are on the specific domain\n// local storage persists between sessions\n//cookies deals with servers\n//local storage deals with browser\n//localStorage only saves strings","map":{"version":3,"sources":["C:\\Users\\Home\\documents\\anthony\\lambda\\week12-Rd.2.React\\dark-mode\\src\\components\\hooks\\useLocalStorage.js"],"names":["useState","useLocalStorage","key","initialValue","item","window","localStorage","getItem","JSON","parse","storedValue","setStoredValue","setValue","value","setItem","stringify"],"mappings":";AAAA,SAASA,QAAT,QAAyB,OAAzB;AAGA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,YAAN,EAAuB;AAAA,kBACZH,QAAQ,CAAC,YAAM;AACjD;AACA,QAAMI,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BL,GAA5B,CAAb,CAFiD,CAGjD;;AACA,WAAOE,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBD,YAAjC;AACH,GAL6C,CADI;AAAA;AAAA,MAC3CO,WAD2C;AAAA,MAC9BC,cAD8B;;AAOlD,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AACtBF,IAAAA,cAAc,CAACE,KAAD,CAAd,CADsB,CAEtB;AACA;;AACAR,IAAAA,MAAM,CAACC,YAAP,CAAoBQ,OAApB,CAA4BZ,GAA5B,EAAiCM,IAAI,CAACO,SAAL,CAAeF,KAAf,CAAjC;AACH,GALD;;AAMA,SAAO,CAACH,WAAD,EAAcE,QAAd,CAAP;AACH,CAdM,C,CAiBP;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { useState } from 'react';\r\n\r\n\r\nexport const useLocalStorage = (key, initialValue) => {\r\n    const [storedValue, setStoredValue] = useState(() => {\r\n        //getItem by passing in key you want retrieved\r\n        const item = window.localStorage.getItem(key);\r\n        //JSON.parse converts string back to an object\r\n        return item ? JSON.parse(item) : initialValue;\r\n    });\r\n    const setValue = value => {\r\n        setStoredValue(value);\r\n        //setItem takes 1) string of key 2) string you want to save\r\n        //localStorage only saves strings - must stringify vaue\r\n        window.localStorage.setItem(key, JSON.stringify(value))\r\n    }\r\n    return [storedValue, setValue];\r\n}\r\n\r\n\r\n//Local storage is ability to store strings that persist across user sessions\r\n//object stored in browser when you are on the specific domain\r\n// local storage persists between sessions\r\n//cookies deals with servers\r\n//local storage deals with browser\r\n//localStorage only saves strings"]},"metadata":{},"sourceType":"module"}